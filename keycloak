#!/bin/bash

# configuration
export exec_as_user=1000
export exec_as_group=1000
export service_check_path=":8080/realms/master"
export service_check_tcponly=false

function runsvc(){

    service_name=$1
    service_image=$2

    docker run -d \
        --name "${service_name}" \
        --hostname "${service_name}" \
        --restart unless-stopped \
        --user "${exec_as_user}:${exec_as_group}" \
        --network ${DOCKER_NETWORK_NAME} \
        -e KC_HTTP_ENABLED="true" \
        -e KC_HOSTNAME="https://${service_name}.${WILDCARD_DOMAIN}" \
        -e KC_HOSTNAME_ADMIN="https://${service_name}.${WILDCARD_DOMAIN}" \
        -e KC_HOSTNAME_STRICT="false" \
        -e KC_PROXY_ADDRESS_FORWARDING="true" \
        -e KC_HEALTH_ENABLED="true" \
        -e KC_METRICS_ENABLED="true" \
        -e KC_BOOTSTRAP_ADMIN_USERNAME="admin" \
        -e KC_BOOTSTRAP_ADMIN_PASSWORD="password" \
        -v "${DATA_ROOT_FOLDER}/${service_name}/data:/opt/keycloak/data:rw" \
        -l "traefik.enable=true" \
        -l "traefik.http.services.${service_name}.loadbalancer.server.port=8080" \
        -l "traefik.http.services.${service_name}.loadbalancer.server.scheme=http" \
        -l "traefik.http.routers.${service_name}.service=${service_name}" \
        -l "traefik.http.routers.${service_name}.entrypoints=https" \
        -l "traefik.http.routers.${service_name}.tls=true" \
        -l "traefik.http.routers.${service_name}.rule=Host(\`${service_name}.${WILDCARD_DOMAIN}\`)" \
        -p "${EXPOSE_BINDADDRESS}:28003:8080" \
        ${service_image} \
        start
    
}

function post_start_tasks(){
    
    service_name=$1

    echo "populating keycloak with realms.."
    # Login to Keycloak and retrieve access token
    response=$(curl -s -X POST "https://${service_name}.${WILDCARD_DOMAIN}/realms/master/protocol/openid-connect/token" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "client_id=admin-cli" \
        -d "username=admin" \
        -d "password=password")

    access_token=$(echo "$response" | jq -r '.access_token')

    if [ -z "$access_token" ] || [ "$access_token" == "null" ]; then
        echo "Failed to retrieve access token"
        return 1
    fi

    # Check if the realm "apps" exists
    realm_exists=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://${service_name}.${WILDCARD_DOMAIN}/admin/realms/apps" \
        -H "Authorization: Bearer $access_token")

    if [ "$realm_exists" -eq 200 ]; then
        echo "Realm 'apps' exists. Deleting it..."
        status=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE "https://${service_name}.${WILDCARD_DOMAIN}/admin/realms/apps" \
            -H "Authorization: Bearer $access_token")
        if [ "$status" -eq 204 ]; then
            echo "✅ Realm 'apps' deleted successfully."
        else
            echo "❌ Failed to delete realm 'apps'. Status code: $status"
        fi
    fi

    echo "Creating realm 'apps'..."
    status=$(curl -s -o /dev/null -w "%{http_code}" -X POST "https://${service_name}.${WILDCARD_DOMAIN}/admin/realms/" \
        -H "Authorization: Bearer $access_token" \
        -H "Content-Type: application/json" \
        --data-binary "@${DATA_ROOT_FOLDER}/${service_name}/config/apps-realm.json")
    if [ "$status" -eq 201 ]; then
        echo "✅ Realm 'apps' created successfully."
    else
        echo "❌ Failed to create realm 'apps'. Status code: $status"
    fi

}