#!/bin/bash

source "$(dirname "$0")/env"
source "$(dirname "$0")/envsecret"

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <service_name> <command>"
    exit 1
fi

export service_name=$1
eval "export service_image=\${${service_name}_image}"
export command=$2
export service_script="$(dirname "$0")/services/${service_name}"

if [ ! -f "$service_script" ]; then
    echo "Error: Service script '$service_script' not found."
    exit 1
fi

#script should define function service_name_run, and export http port and servicecheckpath
source "$service_script"

if [ "$command" == "start" ]; then

    # start container
    if docker ps -a --format '{{.Names}}' | grep -q "^${service_name}$"; then
        echo "Container ${service_name} exists. Starting it..."
        docker start ${service_name}
    else
      
      export fresh_container=true

      create_config_and_data_folder ${service_name} ${exec_as_user} ${exec_as_group}
      runsvc
    fi
    
    ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${service_name})
    
    if [ -n "${service_check_path}" ]; then
      http_readiness_check ${service_name} "${ip}${service_check_path}"
    fi

    if [ "${fresh_container}" == "true" ] && declare -f post_start_action > /dev/null; then
      echo "Running poststart function for fresh container..."
      post_start_action
    fi

fi

if [ "$command" == "stop" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
fi

if [ "$command" == "rm" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
  echo "Removing container ${service_name}..."
  docker rm ${service_name}
fi

if [ "$command" == "destroy" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
  echo "Removing container ${service_name}..."
  docker rm ${service_name}
  delete_config_and_data_folder ${service_name}
fi


