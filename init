#/bin/bash

export script_dir="$(cd "$(dirname "${BASH_SOURCE}")" && pwd)"
source $script_dir/initsecrets

export DOCKER_NETWORK_NAME=primenet
export DOCKER_NETWORK_SUBNET=18
export DATA_ROOT_FOLDER=/home/${USER}/apps
export WILDCARD_DOMAIN=zez.duckdns.org
export EXPOSE_BINDADDRESS=127.0.0.1

# Platform

# https://hub.docker.com/_/traefik/tags?page=1&name=3.
# https://github.com/traefik/traefik/releases 
export traefik_image=docker.io/traefik:3.4.0

# https://hub.docker.com/r/portainer/portainer-ce/tags?page=1&name=2.
export portainer_image=portainer/portainer-ce:2.27.5

# Repos

# https://hub.docker.com/_/registry/tags?page=1&name=2.
export reg_image=docker.io/registry:2.8.3
# https://hub.docker.com/r/joxit/docker-registry-ui/tags?page=1&name=2.
export rui_image=joxit/docker-registry-ui:2.5.7
# https://hub.docker.com/r/dzikoysk/reposilite/tags?page=1&name=3.
export reposilite_image=dzikoysk/reposilite:3.5.23
# https://hub.docker.com/r/joseluisq/static-web-server/tags
export static_image=joseluisq/static-web-server:2.33.1

# Minio

# https://hub.docker.com/r/minio/minio/tags
export minio_image=minio/minio:RELEASE.2025-04-22T22-12-26Z

# IDP

# https://quay.io/repository/keycloak/keycloak?tab=tags&tag=latest
export keycloak_image=quay.io/keycloak/keycloak:26.2.3-0

# Observability stack

# https://hub.docker.com/r/prom/prometheus/tags?page=1&name=3.
export prometheus_image=prom/prometheus:v3.3.1

# https://hub.docker.com/r/prom/alertmanager/tags?page=1&name=0.
export alertmanager_image=prom/alertmanager:v0.28.1

# https://hub.docker.com/r/grafana/loki/tags?page=1&name=3.
export loki_image=grafana/loki:3.5.0

# https://hub.docker.com/r/grafana/tempo/tags?page=1&name=2.
export tempo_image=grafana/tempo:2.7.2

# https://hub.docker.com/r/grafana/alloy/tags?page=1&name=v1.
export alloy_image=grafana/alloy:v1.8.3

# https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags?page=&page_size=&ordering=&name=0.
export otelcol_image=otel/opentelemetry-collector-contrib:0.123.0

# https://hub.docker.com/r/grafana/grafana/tags?page=1&name=12.
export grafana_image=grafana/grafana:12.0.0
export grafana_enterprise_image=grafana/grafana-enterprise:12.0.0

# https://hub.docker.com/r/prom/node-exporter/tags?page=1&name=1.
export node_exporter_image=prom/node-exporter:v1.9.1

# https://console.cloud.google.com/gcr/images/cadvisor/GLOBAL/cadvisor
export cadvisor_image=gcr.io/cadvisor/cadvisor:v0.52.1

# Databases
# https://hub.docker.com/_/mariadb
export mariadb_image=docker.io/mariadb:11.7.2
# https://hub.docker.com/_/mysql/tags?page=1&name=8.
export mysql_image=docker.io/mysql:8.4.5
# https://hub.docker.com/_/postgres
export postgres_image=docker.io/postgres:17.4
# https://hub.docker.com/_/elasticsearch
export elasticsearch_image=docker.io/elasticsearch:8.18.0
export kibana_image=docker.io/kibana:8.18.0
# oracledb: container-registry.oracle.com/database/free:23.3.0.0
export oracledb_image=oracledb:19.3.0
# https://hub.docker.com/_/adminer/tags?page=1&name=4.
export adminer_image=docker.io/adminer:5.2.1

# Messaging
# https://quay.io/repository/strimzi/kafka?tab=tags&tag=latest
export kafka_image=apache/kafka:4.0.0
# https://hub.docker.com/r/obsidiandynamics/kafdrop/tags?page=1&name=4.
export kafdrop_image=obsidiandynamics/kafdrop:4.1.0
# https://hub.docker.com/r/apache/activemq-artemis/tags?page=1&name=2.
export artemis_image=apache/activemq-artemis:2.41.0

# Homelab

# https://hub.docker.com/r/linuxserver/jellyfin/tags?page=1&name=10.
export jellyfin_image=linuxserver/jellyfin:10.10.7

export teddycast_image=registry.awon.cpss.duckdns.org/teddycast:1.0.7
export rentman_image=registry.awon.cpss.duckdns.org/rentman:1.0.4
export pkdex_image=registry.awon.cpss.duckdns.org/pkdex:1.0.4

# https://hub.docker.com/r/linuxserver/wireguard/tags?name=1.
export wireguard_image=linuxserver/wireguard:1.0.20210914

# https://hub.docker.com/r/linuxserver/transmission/tags
export transmission_image=linuxserver/transmission:4.0.6

# https://hub.docker.com/r/linuxserver/nextcloud/tags
export nextcloud_image=linuxserver/nextcloud:31.0.4

# https://hub.docker.com/r/linuxserver/homeassistant/tags
export homeassistant_image=linuxserver/homeassistant:2025.4.4

# https://hub.docker.com/r/syncthing/syncthing/tags?page=&page_size=&ordering=&name=1.
export syncthing_image=syncthing/syncthing:1.29.6

# https://hub.docker.com/r/ollama/ollama/tags?name=0.
export ollama_image=ollama/ollama:0.6.8

# https://github.com/open-webui/open-webui/pkgs/container/open-webui/versions
export openwebui_image=ghcr.io/open-webui/open-webui:0.6.7

# Windows

# https://hub.docker.com/r/dockurr/windows/tags
export windows_image=dockurr/windows:4.35

# Helper functions

function readiness_check {
    service_name=$1
    url=$2
    tcponly=$3
    retries=60
    echo "Checking readiness of $service_name at $url..."
    for i in $(seq 1 "$retries"); do
        
        if [ "$tcponly" == "true" ]; then
            echo "Attemp $i: Checking $service_name with tcp at $url..."
            host=$(echo "$url" | cut -d':' -f1)
            port=$(echo "$url" | cut -d':' -f2)
            nc -z -w5 "$host" "$port"
            res=$?
            if [ "$res" -eq 0 ]; then
                res=200
            else
                res=0
            fi
        else
            echo "Attemp $i: Checking $service_name with http at $url..."
            res=$(curl -f -L -s -m 5 -w "%{http_code}" -o /dev/null "$url")
        fi
        
        echo "Response code: $res"

        if [ "$res" -eq "200" ]; then
            echo "✅ $service_name OK"
            break
        else
            if [ "$i" -lt "$retries" ]; then
                echo "⏪ Retrying in 5 seconds..."
                sleep 2
            else
                echo "❌ $service_name FAILED after 10 attempts"
            fi
        fi
    done
}

function create_config_and_data_folder(){
    service_name=$1
    ownername=$2
    groupname=$3

    sudo mkdir -p ${DATA_ROOT_FOLDER}/${service_name}/config
    sudo mkdir -p ${DATA_ROOT_FOLDER}/${service_name}/data

    if [ -d "templates/${service_name}/config" ]; then
    
        sudo cp -r templates/${service_name}/config/* ${DATA_ROOT_FOLDER}/${service_name}/config

        # create config files
        if compgen -G "templates/${service_name}/config/*.tmpl" > /dev/null; then
            echo "Template files found for ${service_name}."
            for tmpl_file in templates/${service_name}/config/*.tmpl; do
                echo "Processing template file: ${tmpl_file}"
                output_file=${DATA_ROOT_FOLDER}/${service_name}/config/$(basename "${tmpl_file}" .tmpl)
                envsubst < "${tmpl_file}" | sudo tee "${output_file}" > /dev/null
                echo "Created config file: ${output_file}"
            done
        else
            echo "No template files found for ${service_name}."
        fi

    fi
    sudo chown -R ${ownername}:${groupname} ${DATA_ROOT_FOLDER}/${service_name}

    echo "Created folder structure for service: ${service_name}"
}

function delete_config_and_data_folder(){
    service_name=$1

    sudo rm -rf ${DATA_ROOT_FOLDER}/${service_name}

    echo "Deleted folder structure for service: ${service_name}"
}


function lab(){

if [ "$1" == "help" ]; then
  echo "Available commands:"
  echo "  run <service_name>      - Start or create and start the specified service."
  echo "  stop <service_name>     - Stop the specified service."
  echo "  rm <service_name>       - Remove the specified service container."
  echo "  destroy <service_name>  - Stop, remove the container, and delete its configuration and data."
  echo "  help                    - Display this help message."
  return 0
fi

if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <command> <service_name>"
    return 1
fi

command=$1
service_name=$2
eval "service_image=\${${service_name}_image}"
service_script="${script_dir}/${service_name}"

if [ ! -f "$service_script" ]; then
    echo "Error: Service script '$service_script' not found."
    return 1
fi

#script should define function service_name_run, and export http port and servicecheckpath
source "$service_script"

if [ "$command" == "run" ]; then
    
    networking

    # start container
    if docker ps -a --format '{{.Names}}' | grep -q "^${service_name}$"; then
        echo "Container ${service_name} exists. Starting it..."
        docker start ${service_name}
    else
      
      fresh_container=true

      create_config_and_data_folder ${service_name} ${exec_as_user} ${exec_as_group}
      runsvc ${service_name} ${service_image}
    fi
    
    ip=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${service_name})
    
    if [ -n "${service_check_path}" ]; then
      readiness_check ${service_name} "${ip}${service_check_path}" "$service_check_tcponly"
    fi

    if [ "${fresh_container}" == "true" ]; then
      post_start_tasks ${service_name}
    fi

fi

if [ "$command" == "stop" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
fi

if [ "$command" == "rm" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
  echo "Removing container ${service_name}..."
  docker rm ${service_name}
fi

if [ "$command" == "destroy" ]; then
  echo "Stopping container ${service_name}..."
  docker stop ${service_name}
  echo "Removing container ${service_name}..."
  docker rm ${service_name}
  delete_config_and_data_folder ${service_name}
fi

}


function networking(){

  if [ -z $(docker network ls --filter name=^${DOCKER_NETWORK_NAME}$ --format="{{ .Name }}") ] ; then 
    echo "Setting up dedicated network bridge.."
    docker network create --driver=bridge --subnet=172.${DOCKER_NETWORK_SUBNET}.0.0/16 --gateway=172.${DOCKER_NETWORK_SUBNET}.0.1 ${DOCKER_NETWORK_NAME} ; 
  echo "✅ $DOCKER_NETWORK_NAME docker network created !"
  else
    echo "✅ $DOCKER_NETWORK_NAME docker network exists !"
  fi

}